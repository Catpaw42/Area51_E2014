/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao;

import com.spoledge.audao.db.dao.AbstractDao;
import com.spoledge.audao.db.dao.DaoException;

import database.dto.Requisition;


/**
 * This is the DAO.
 *
 * @author generated
 */
public interface RequisitionDao extends AbstractDao {

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public Requisition findByPrimaryKey( long rekvisitionId );

    /**
     * Inserts a new record.
     */
    public void insert( Requisition dto ) throws DaoException;

    /**
     * Updates column henvist_til of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateHenvistTil( long rekvisitionId, Requisition.HenvistTil henvistTil ) throws DaoException;

    /**
     * Updates column hospital_oenske of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateHospitalOenske( long rekvisitionId, Requisition.HospitalOenske hospitalOenske ) throws DaoException;

    /**
     * Updates column pririotering of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updatePririotering( long rekvisitionId, Requisition.Pririotering pririotering ) throws DaoException;

    /**
     * Updates column ambulant_koersel of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAmbulantKoersel( long rekvisitionId, Requisition.AmbulantKoersel ambulantKoersel ) throws DaoException;

    /**
     * Updates column indlaeggelse_transport of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateIndlaeggelseTransport( long rekvisitionId, Requisition.IndlaeggelseTransport indlaeggelseTransport ) throws DaoException;

    /**
     * Updates column undersoegelse_modalitet of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateUndersoegelseModalitet( long rekvisitionId, Requisition.UndersoegelseModalitet undersoegelseModalitet ) throws DaoException;

    /**
     * Updates column status of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateStatus( long rekvisitionId, Requisition.Status status ) throws DaoException;

    /**
     * Updates column samtykke of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateSamtykke( long rekvisitionId, boolean samtykke ) throws DaoException;

    /**
     * Updates column ambulant of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAmbulant( long rekvisitionId, boolean ambulant ) throws DaoException;

    /**
     * Updates column dato_forslag of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateDatoForslag( long rekvisitionId, String datoForslag ) throws DaoException;

    /**
     * Updates column udf_indlagt of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateUdfIndlagt( long rekvisitionId, boolean udfIndlagt ) throws DaoException;

    /**
     * Updates column graviditet of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateGraviditet( long rekvisitionId, boolean graviditet ) throws DaoException;

    /**
     * Updates column cave of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateCave( long rekvisitionId, String cave ) throws DaoException;

}
