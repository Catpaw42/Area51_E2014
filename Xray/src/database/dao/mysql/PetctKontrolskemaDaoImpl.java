/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.PetctKontrolskemaDao;
import database.dto.PetctKontrolskema;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class PetctKontrolskemaDaoImpl extends AbstractDaoImpl<PetctKontrolskema> implements PetctKontrolskemaDao {

    private static final String TABLE_NAME = "petct_kontrolskema";

    protected static final String SELECT_COLUMNS = "petct_kontrolskema_id, formaal, formaal_behandlingsktrl_text, formaal_recidiv_text, formaal_andet_text, kanPtLiggeStille30, ptTaalerFaste, diabetes, DMBeh, smerter, respInsuff, klaustrofobi, preMed, DMRegime, datoForslag, allergi, allergi_text, fedme, vaegt, tidlBilledDiagnostik, biopsi, biopsi_text, operation, operation_text, kemo_og_straale, relKontraIndCT, relKontraIndCT_text, nedsatNyreFkt, SidstePKreatinin, SidstePKreatTimestamp, POKontrast, IVKontrast, AktuelPKreatinin, AktuelPKreatTimestamp, AktuelPKreatAndet_text";

    protected static final String PK_CONDITION = "petct_kontrolskema_id=?";

    private static final String SQL_INSERT = "INSERT INTO petct_kontrolskema (formaal,formaal_behandlingsktrl_text,formaal_recidiv_text,formaal_andet_text,kanPtLiggeStille30,ptTaalerFaste,diabetes,DMBeh,smerter,respInsuff,klaustrofobi,preMed,DMRegime,datoForslag,allergi,allergi_text,fedme,vaegt,tidlBilledDiagnostik,biopsi,biopsi_text,operation,operation_text,kemo_og_straale,relKontraIndCT,relKontraIndCT_text,nedsatNyreFkt,SidstePKreatinin,SidstePKreatTimestamp,POKontrast,IVKontrast,AktuelPKreatinin,AktuelPKreatTimestamp,AktuelPKreatAndet_text) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    private static final PetctKontrolskema.Formaal[] _PetctKontrolskema_Formaals = { null, PetctKontrolskema.Formaal.PRIMAERDIAG, PetctKontrolskema.Formaal.KONTROLBEH, PetctKontrolskema.Formaal.KONTROLREMISSION, PetctKontrolskema.Formaal.KONTROLRECIDIV };
    private static final PetctKontrolskema.KemoOgStraale[] _PetctKontrolskema_KemoOgStraales = { null, PetctKontrolskema.KemoOgStraale.ALDRIGGIVET, PetctKontrolskema.KemoOgStraale.KEMOTERAPI, PetctKontrolskema.KemoOgStraale.STRAALETERAPI, PetctKontrolskema.KemoOgStraale.KEMO_OG_STRAALE };

    public PetctKontrolskemaDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public PetctKontrolskema findByPrimaryKey( int petctKontrolskemaId ) {
        return findOne( PK_CONDITION, petctKontrolskemaId);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - petctKontrolskemaId
     */
    public int insert( PetctKontrolskema dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getFormaal() == null ) {
                stmt.setNull( 1, Types.SMALLINT );
            }
            else {
                stmt.setShort( 1, (short) (dto.getFormaal().ordinal() + 1) );
            }

            if ( dto.getFormaalBehandlingsktrlText() != null ) {
                checkMaxLength( "formaal_behandlingsktrl_text", dto.getFormaalBehandlingsktrlText(), 50 );
            }
            stmt.setString( 2, dto.getFormaalBehandlingsktrlText() );

            if ( dto.getFormaalRecidivText() != null ) {
                checkMaxLength( "formaal_recidiv_text", dto.getFormaalRecidivText(), 250 );
            }
            stmt.setString( 3, dto.getFormaalRecidivText() );

            if ( dto.getFormaalAndetText() != null ) {
                checkMaxLength( "formaal_andet_text", dto.getFormaalAndetText(), 250 );
            }
            stmt.setString( 4, dto.getFormaalAndetText() );

            if ( dto.getKanPtLiggeStille30() == null ) {
                throw new DaoException("Value of column 'kanPtLiggeStille30' cannot be null");
            }
            stmt.setByte( 5, dto.getKanPtLiggeStille30() ? ((byte)1) : ((byte)0) );

            if ( dto.getPtTaalerFaste() == null ) {
                throw new DaoException("Value of column 'ptTaalerFaste' cannot be null");
            }
            stmt.setByte( 6, dto.getPtTaalerFaste() ? ((byte)1) : ((byte)0) );

            if ( dto.getDiabetes() == null ) {
                throw new DaoException("Value of column 'diabetes' cannot be null");
            }
            stmt.setByte( 7, dto.getDiabetes() ? ((byte)1) : ((byte)0) );

            if ( dto.getDMBeh() != null ) {
                checkMaxLength( "DMBeh", dto.getDMBeh(), 50 );
            }
            stmt.setString( 8, dto.getDMBeh() );

            if ( dto.getSmerter() == null ) {
                throw new DaoException("Value of column 'smerter' cannot be null");
            }
            stmt.setByte( 9, dto.getSmerter() ? ((byte)1) : ((byte)0) );

            if ( dto.getRespInsuff() == null ) {
                throw new DaoException("Value of column 'respInsuff' cannot be null");
            }
            stmt.setByte( 10, dto.getRespInsuff() ? ((byte)1) : ((byte)0) );

            if ( dto.getKlaustrofobi() == null ) {
                throw new DaoException("Value of column 'klaustrofobi' cannot be null");
            }
            stmt.setByte( 11, dto.getKlaustrofobi() ? ((byte)1) : ((byte)0) );

            if ( dto.getPreMed() == null ) {
                stmt.setNull( 12, Types.TINYINT );
            }
            else {
                stmt.setByte( 12, dto.getPreMed() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getDMRegime() == null ) {
                stmt.setNull( 13, Types.TINYINT );
            }
            else {
                stmt.setByte( 13, dto.getDMRegime() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getDatoForslag() != null ) {
                checkMaxLength( "datoForslag", dto.getDatoForslag(), 50 );
            }
            stmt.setString( 14, dto.getDatoForslag() );

            if ( dto.getAllergi() == null ) {
                throw new DaoException("Value of column 'allergi' cannot be null");
            }
            stmt.setByte( 15, dto.getAllergi() ? ((byte)1) : ((byte)0) );

            if ( dto.getAllergiText() != null ) {
                checkMaxLength( "allergi_text", dto.getAllergiText(), 50 );
            }
            stmt.setString( 16, dto.getAllergiText() );

            if ( dto.getFedme() == null ) {
                throw new DaoException("Value of column 'fedme' cannot be null");
            }
            stmt.setByte( 17, dto.getFedme() ? ((byte)1) : ((byte)0) );

            if ( dto.getVaegt() == null ) {
                stmt.setNull( 18, Types.INTEGER );
            }
            else {
                stmt.setInt( 18, dto.getVaegt() );
            }

            if ( dto.getTidlBilledDiagnostik() != null ) {
                checkMaxLength( "tidlBilledDiagnostik", dto.getTidlBilledDiagnostik(), 250 );
            }
            stmt.setString( 19, dto.getTidlBilledDiagnostik() );

            if ( dto.getBiopsi() == null ) {
                throw new DaoException("Value of column 'biopsi' cannot be null");
            }
            stmt.setByte( 20, dto.getBiopsi() ? ((byte)1) : ((byte)0) );

            if ( dto.getBiopsiText() != null ) {
                checkMaxLength( "biopsi_text", dto.getBiopsiText(), 50 );
            }
            stmt.setString( 21, dto.getBiopsiText() );

            if ( dto.getOperation() == null ) {
                throw new DaoException("Value of column 'operation' cannot be null");
            }
            stmt.setByte( 22, dto.getOperation() ? ((byte)1) : ((byte)0) );

            if ( dto.getOperationText() != null ) {
                checkMaxLength( "operation_text", dto.getOperationText(), 50 );
            }
            stmt.setString( 23, dto.getOperationText() );

            if ( dto.getKemoOgStraale() == null ) {
                stmt.setNull( 24, Types.SMALLINT );
            }
            else {
                stmt.setShort( 24, (short) (dto.getKemoOgStraale().ordinal() + 1) );
            }

            if ( dto.getRelKontraIndCT() == null ) {
                throw new DaoException("Value of column 'relKontraIndCT' cannot be null");
            }
            stmt.setByte( 25, dto.getRelKontraIndCT() ? ((byte)1) : ((byte)0) );

            if ( dto.getRelKontraIndCTText() != null ) {
                checkMaxLength( "relKontraIndCT_text", dto.getRelKontraIndCTText(), 50 );
            }
            stmt.setString( 26, dto.getRelKontraIndCTText() );

            if ( dto.getNedsatNyreFkt() == null ) {
                throw new DaoException("Value of column 'nedsatNyreFkt' cannot be null");
            }
            stmt.setByte( 27, dto.getNedsatNyreFkt() ? ((byte)1) : ((byte)0) );

            if ( dto.getSidstePKreatinin() == null ) {
                stmt.setNull( 28, Types.INTEGER );
            }
            else {
                stmt.setInt( 28, dto.getSidstePKreatinin() );
            }
            stmt.setTimestamp( 29, dto.getSidstePKreatTimestamp() );

            if ( dto.getPOKontrast() == null ) {
                stmt.setNull( 30, Types.TINYINT );
            }
            else {
                stmt.setByte( 30, dto.getPOKontrast() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getIVKontrast() == null ) {
                stmt.setNull( 31, Types.TINYINT );
            }
            else {
                stmt.setByte( 31, dto.getIVKontrast() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getAktuelPKreatinin() == null ) {
                stmt.setNull( 32, Types.INTEGER );
            }
            else {
                stmt.setInt( 32, dto.getAktuelPKreatinin() );
            }
            stmt.setTimestamp( 33, dto.getAktuelPKreatTimestamp() );

            if ( dto.getAktuelPKreatAndetText() != null ) {
                checkMaxLength( "AktuelPKreatAndet_text", dto.getAktuelPKreatAndetText(), 50 );
            }
            stmt.setString( 34, dto.getAktuelPKreatAndetText() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setPetctKontrolskemaId( rs.getInt( 1 ));

            return dto.getPetctKontrolskemaId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected PetctKontrolskema fetch( ResultSet rs ) throws SQLException {
        PetctKontrolskema dto = new PetctKontrolskema();
        dto.setPetctKontrolskemaId( rs.getInt( 1 ));
        dto.setFormaal( _PetctKontrolskema_Formaals[ rs.getShort( 2 ) ]);

        if ( rs.wasNull()) {
            dto.setFormaal( null );
        }

        dto.setFormaalBehandlingsktrlText( rs.getString( 3 ));
        dto.setFormaalRecidivText( rs.getString( 4 ));
        dto.setFormaalAndetText( rs.getString( 5 ));
        dto.setKanPtLiggeStille30( rs.getBoolean( 6 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setPtTaalerFaste( rs.getBoolean( 7 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setDiabetes( rs.getBoolean( 8 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setDMBeh( rs.getString( 9 ));
        dto.setSmerter( rs.getBoolean( 10 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setRespInsuff( rs.getBoolean( 11 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setKlaustrofobi( rs.getBoolean( 12 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setPreMed( rs.getBoolean( 13 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setPreMed( null );
        }

        dto.setDMRegime( rs.getBoolean( 14 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setDMRegime( null );
        }

        dto.setDatoForslag( rs.getString( 15 ));
        dto.setAllergi( rs.getBoolean( 16 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAllergiText( rs.getString( 17 ));
        dto.setFedme( rs.getBoolean( 18 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setVaegt( rs.getInt( 19 ));

        if ( rs.wasNull()) {
            dto.setVaegt( null );
        }

        dto.setTidlBilledDiagnostik( rs.getString( 20 ));
        dto.setBiopsi( rs.getBoolean( 21 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setBiopsiText( rs.getString( 22 ));
        dto.setOperation( rs.getBoolean( 23 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setOperationText( rs.getString( 24 ));
        dto.setKemoOgStraale( _PetctKontrolskema_KemoOgStraales[ rs.getShort( 25 ) ]);

        if ( rs.wasNull()) {
            dto.setKemoOgStraale( null );
        }

        dto.setRelKontraIndCT( rs.getBoolean( 26 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setRelKontraIndCTText( rs.getString( 27 ));
        dto.setNedsatNyreFkt( rs.getBoolean( 28 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setSidstePKreatinin( rs.getInt( 29 ));

        if ( rs.wasNull()) {
            dto.setSidstePKreatinin( null );
        }

        dto.setSidstePKreatTimestamp( rs.getTimestamp( 30 ));
        dto.setPOKontrast( rs.getBoolean( 31 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setPOKontrast( null );
        }

        dto.setIVKontrast( rs.getBoolean( 32 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setIVKontrast( null );
        }

        dto.setAktuelPKreatinin( rs.getInt( 33 ));

        if ( rs.wasNull()) {
            dto.setAktuelPKreatinin( null );
        }

        dto.setAktuelPKreatTimestamp( rs.getTimestamp( 34 ));
        dto.setAktuelPKreatAndetText( rs.getString( 35 ));

        return dto;
    }

    protected PetctKontrolskema[] toArray(ArrayList<PetctKontrolskema> list ) {
        PetctKontrolskema[] ret = new PetctKontrolskema[ list.size() ];
        return list.toArray( ret );
    }

}
