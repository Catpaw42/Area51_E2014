/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;

import database.dao.UlInvKontrolskemaDao;
import database.dto.UlInvKontrolskema;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class UlInvKontrolskemaDaoImpl extends AbstractDaoImpl<UlInvKontrolskema> implements UlInvKontrolskemaDao {

    private static final String TABLE_NAME = "ul_inv_kontrolskema";

    protected static final String SELECT_COLUMNS = "ul_inv_kontrolskema_id, ak_timestamp, trombocytter, inr";

    protected static final String PK_CONDITION = "ul_inv_kontrolskema_id=?";

    private static final String SQL_INSERT = "INSERT INTO ul_inv_kontrolskema (ak_timestamp,trombocytter,inr) VALUES (?,?,?)";

    public UlInvKontrolskemaDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public UlInvKontrolskema findByPrimaryKey( int ulInvKontrolskemaId ) {
        return findOne( PK_CONDITION, ulInvKontrolskemaId);
    }

    /**
     * Finds records.
     */
    public UlInvKontrolskema[] findDynamic( String cond, int offset, int count, Object... params ) {
        return findManyArray( cond, offset, count, params);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - ulInvKontrolskemaId
     */
    public int insert( UlInvKontrolskema dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getAkTimestamp() == null ) {
                throw new DaoException("Value of column 'ak_timestamp' cannot be null");
            }
            stmt.setTimestamp( 1, dto.getAkTimestamp() );

            if ( dto.getTrombocytter() == null ) {
                throw new DaoException("Value of column 'trombocytter' cannot be null");
            }
            stmt.setInt( 2, dto.getTrombocytter() );

            if ( dto.getInr() == null ) {
                throw new DaoException("Value of column 'inr' cannot be null");
            }
            stmt.setDouble( 3, dto.getInr() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setUlInvKontrolskemaId( rs.getInt( 1 ));

            return dto.getUlInvKontrolskemaId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected UlInvKontrolskema fetch( ResultSet rs ) throws SQLException {
        UlInvKontrolskema dto = new UlInvKontrolskema();
        dto.setUlInvKontrolskemaId( rs.getInt( 1 ));
        dto.setAkTimestamp( rs.getTimestamp( 2 ));
        dto.setTrombocytter( rs.getInt( 3 ));
        dto.setInr( rs.getDouble( 4 ));

        return dto;
    }

    protected UlInvKontrolskema[] toArray(ArrayList<UlInvKontrolskema> list ) {
        UlInvKontrolskema[] ret = new UlInvKontrolskema[ list.size() ];
        return list.toArray( ret );
    }

}
