/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.PETCTKontrolskemaDao;
import database.dto.PETCTKontrolskema;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class PETCTKontrolskemaDaoImpl extends AbstractDaoImpl<PETCTKontrolskema> implements PETCTKontrolskemaDao {

    private static final String TABLE_NAME = "PETCT_kontrolskema";

    protected static final String SELECT_COLUMNS = "PETCT_kontrolskema_id, formaal, formaal_tekst, kanPtLiggeStille30, ptTaalerFaste, diabetes, DM_Beh, smerter, respInsuff, klaustrofobi, allergi, allergi_tekst, fedme, vaegt, biopsi, biopsi_tekst, operation, operation_tekst, kemo_og_straale, kontrast_reaktion, kontrast_reaktion_tekst, nedsatNyreFkt, SidstePKreatinin, SidstePKreatTimestamp, preMed, DMRegime, POKontrast, IVKontrast, AktuelPKreatinin, AktuelPKreatTimestamp, Aktuel_andet_tekst";

    protected static final String PK_CONDITION = "PETCT_kontrolskema_id=?";

    private static final String SQL_INSERT = "INSERT INTO PETCT_kontrolskema (formaal,formaal_tekst,kanPtLiggeStille30,ptTaalerFaste,diabetes,DM_Beh,smerter,respInsuff,klaustrofobi,allergi,allergi_tekst,fedme,vaegt,biopsi,biopsi_tekst,operation,operation_tekst,kemo_og_straale,kontrast_reaktion,kontrast_reaktion_tekst,nedsatNyreFkt,SidstePKreatinin,SidstePKreatTimestamp,preMed,DMRegime,POKontrast,IVKontrast,AktuelPKreatinin,AktuelPKreatTimestamp,Aktuel_andet_tekst) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    private static final PETCTKontrolskema.Formaal[] _PETCTKontrolskema_Formaals = { null, PETCTKontrolskema.Formaal.PRIMAERDIAG, PETCTKontrolskema.Formaal.KONTROLBEH, PETCTKontrolskema.Formaal.KONTROLREMISSION, PETCTKontrolskema.Formaal.KONTROLRECIDIV };
    private static final PETCTKontrolskema.KemoOgStraale[] _PETCTKontrolskema_KemoOgStraales = { null, PETCTKontrolskema.KemoOgStraale.NEJ, PETCTKontrolskema.KemoOgStraale.KEMOTERAPI, PETCTKontrolskema.KemoOgStraale.STRAALETERAPI, PETCTKontrolskema.KemoOgStraale.KEMO_OG_STRAALE };

    public PETCTKontrolskemaDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public PETCTKontrolskema findByPrimaryKey( int pETCTKontrolskemaId ) {
        return findOne( PK_CONDITION, pETCTKontrolskemaId);
    }

    /**
     * Finds records.
     */
    public PETCTKontrolskema[] findDynamic( String cond, int offset, int count, Object... params ) {
        return findManyArray( cond, offset, count, params);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - pETCTKontrolskemaId
     */
    public int insert( PETCTKontrolskema dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getFormaal() == null ) {
                throw new DaoException("Value of column 'formaal' cannot be null");
            }
            stmt.setShort( 1, (short) (dto.getFormaal().ordinal() + 1) );

            if ( dto.getFormaalTekst() != null ) {
                checkMaxLength( "formaal_tekst", dto.getFormaalTekst(), 250 );
            }
            stmt.setString( 2, dto.getFormaalTekst() );

            if ( dto.getKanPtLiggeStille30() == null ) {
                throw new DaoException("Value of column 'kanPtLiggeStille30' cannot be null");
            }
            stmt.setByte( 3, dto.getKanPtLiggeStille30() ? ((byte)1) : ((byte)0) );

            if ( dto.getPtTaalerFaste() == null ) {
                throw new DaoException("Value of column 'ptTaalerFaste' cannot be null");
            }
            stmt.setByte( 4, dto.getPtTaalerFaste() ? ((byte)1) : ((byte)0) );

            if ( dto.getDiabetes() == null ) {
                throw new DaoException("Value of column 'diabetes' cannot be null");
            }
            stmt.setByte( 5, dto.getDiabetes() ? ((byte)1) : ((byte)0) );

            if ( dto.getDMBeh() != null ) {
                checkMaxLength( "DM_Beh", dto.getDMBeh(), 100 );
            }
            stmt.setString( 6, dto.getDMBeh() );

            if ( dto.getSmerter() == null ) {
                throw new DaoException("Value of column 'smerter' cannot be null");
            }
            stmt.setByte( 7, dto.getSmerter() ? ((byte)1) : ((byte)0) );

            if ( dto.getRespInsuff() == null ) {
                throw new DaoException("Value of column 'respInsuff' cannot be null");
            }
            stmt.setByte( 8, dto.getRespInsuff() ? ((byte)1) : ((byte)0) );

            if ( dto.getKlaustrofobi() == null ) {
                throw new DaoException("Value of column 'klaustrofobi' cannot be null");
            }
            stmt.setByte( 9, dto.getKlaustrofobi() ? ((byte)1) : ((byte)0) );

            if ( dto.getAllergi() == null ) {
                throw new DaoException("Value of column 'allergi' cannot be null");
            }
            stmt.setByte( 10, dto.getAllergi() ? ((byte)1) : ((byte)0) );

            if ( dto.getAllergiTekst() != null ) {
                checkMaxLength( "allergi_tekst", dto.getAllergiTekst(), 100 );
            }
            stmt.setString( 11, dto.getAllergiTekst() );

            if ( dto.getFedme() == null ) {
                throw new DaoException("Value of column 'fedme' cannot be null");
            }
            stmt.setByte( 12, dto.getFedme() ? ((byte)1) : ((byte)0) );

            if ( dto.getVaegt() == null ) {
                throw new DaoException("Value of column 'vaegt' cannot be null");
            }
            stmt.setInt( 13, dto.getVaegt() );

            if ( dto.getBiopsi() == null ) {
                throw new DaoException("Value of column 'biopsi' cannot be null");
            }
            stmt.setByte( 14, dto.getBiopsi() ? ((byte)1) : ((byte)0) );

            if ( dto.getBiopsiTekst() != null ) {
                checkMaxLength( "biopsi_tekst", dto.getBiopsiTekst(), 100 );
            }
            stmt.setString( 15, dto.getBiopsiTekst() );

            if ( dto.getOperation() == null ) {
                throw new DaoException("Value of column 'operation' cannot be null");
            }
            stmt.setByte( 16, dto.getOperation() ? ((byte)1) : ((byte)0) );

            if ( dto.getOperationTekst() != null ) {
                checkMaxLength( "operation_tekst", dto.getOperationTekst(), 100 );
            }
            stmt.setString( 17, dto.getOperationTekst() );

            if ( dto.getKemoOgStraale() == null ) {
                throw new DaoException("Value of column 'kemo_og_straale' cannot be null");
            }
            stmt.setShort( 18, (short) (dto.getKemoOgStraale().ordinal() + 1) );

            if ( dto.getKontrastReaktion() == null ) {
                throw new DaoException("Value of column 'kontrast_reaktion' cannot be null");
            }
            stmt.setByte( 19, dto.getKontrastReaktion() ? ((byte)1) : ((byte)0) );

            if ( dto.getKontrastReaktionTekst() != null ) {
                checkMaxLength( "kontrast_reaktion_tekst", dto.getKontrastReaktionTekst(), 100 );
            }
            stmt.setString( 20, dto.getKontrastReaktionTekst() );

            if ( dto.getNedsatNyreFkt() == null ) {
                throw new DaoException("Value of column 'nedsatNyreFkt' cannot be null");
            }
            stmt.setByte( 21, dto.getNedsatNyreFkt() ? ((byte)1) : ((byte)0) );

            if ( dto.getSidstePKreatinin() == null ) {
                stmt.setNull( 22, Types.INTEGER );
            }
            else {
                stmt.setInt( 22, dto.getSidstePKreatinin() );
            }
            stmt.setTimestamp( 23, dto.getSidstePKreatTimestamp() );

            if ( dto.getPreMed() == null ) {
                stmt.setNull( 24, Types.TINYINT );
            }
            else {
                stmt.setByte( 24, dto.getPreMed() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getDMRegime() == null ) {
                stmt.setNull( 25, Types.TINYINT );
            }
            else {
                stmt.setByte( 25, dto.getDMRegime() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getPOKontrast() == null ) {
                stmt.setNull( 26, Types.TINYINT );
            }
            else {
                stmt.setByte( 26, dto.getPOKontrast() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getIVKontrast() == null ) {
                stmt.setNull( 27, Types.TINYINT );
            }
            else {
                stmt.setByte( 27, dto.getIVKontrast() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getAktuelPKreatinin() == null ) {
                stmt.setNull( 28, Types.INTEGER );
            }
            else {
                stmt.setInt( 28, dto.getAktuelPKreatinin() );
            }
            stmt.setTimestamp( 29, dto.getAktuelPKreatTimestamp() );

            if ( dto.getAktuelAndetTekst() != null ) {
                checkMaxLength( "Aktuel_andet_tekst", dto.getAktuelAndetTekst(), 100 );
            }
            stmt.setString( 30, dto.getAktuelAndetTekst() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setPETCTKontrolskemaId( rs.getInt( 1 ));

            return dto.getPETCTKontrolskemaId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Updates column preMed of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updatePreMed( int pETCTKontrolskemaId, Boolean preMed ) throws DaoException {
        return updateOne( ( preMed != null ? "preMed=?" : "preMed=NULL"), PK_CONDITION, (preMed == null ? null : (preMed ? ((byte)1) : ((byte)0))), pETCTKontrolskemaId);
    }

    /**
     * Updates column DMRegime of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateDMRegime( int pETCTKontrolskemaId, Boolean dMRegime ) throws DaoException {
        return updateOne( ( dMRegime != null ? "DMRegime=?" : "DMRegime=NULL"), PK_CONDITION, (dMRegime == null ? null : (dMRegime ? ((byte)1) : ((byte)0))), pETCTKontrolskemaId);
    }

    /**
     * Updates column POKontrast of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updatePOKontrast( int pETCTKontrolskemaId, Boolean pOKontrast ) throws DaoException {
        return updateOne( ( pOKontrast != null ? "POKontrast=?" : "POKontrast=NULL"), PK_CONDITION, (pOKontrast == null ? null : (pOKontrast ? ((byte)1) : ((byte)0))), pETCTKontrolskemaId);
    }

    /**
     * Updates column IVKontrast of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateIVKontrast( int pETCTKontrolskemaId, Boolean iVKontrast ) throws DaoException {
        return updateOne( ( iVKontrast != null ? "IVKontrast=?" : "IVKontrast=NULL"), PK_CONDITION, (iVKontrast == null ? null : (iVKontrast ? ((byte)1) : ((byte)0))), pETCTKontrolskemaId);
    }

    /**
     * Updates column AktuelPKreatinin of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAktuelPKreatinin( int pETCTKontrolskemaId, Integer aktuelPKreatinin ) throws DaoException {
        return updateOne( ( aktuelPKreatinin != null ? "AktuelPKreatinin=?" : "AktuelPKreatinin=NULL"), PK_CONDITION, aktuelPKreatinin, pETCTKontrolskemaId);
    }

    /**
     * Updates column AktuelPKreatTimestamp of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAktuelPKreatTimestamp( int pETCTKontrolskemaId, Timestamp aktuelPKreatTimestamp ) throws DaoException {
        return updateOne( ( aktuelPKreatTimestamp != null ? "AktuelPKreatTimestamp=?" : "AktuelPKreatTimestamp=NULL"), PK_CONDITION, aktuelPKreatTimestamp, pETCTKontrolskemaId);
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected PETCTKontrolskema fetch( ResultSet rs ) throws SQLException {
        PETCTKontrolskema dto = new PETCTKontrolskema();
        dto.setPETCTKontrolskemaId( rs.getInt( 1 ));
        dto.setFormaal( _PETCTKontrolskema_Formaals[ rs.getShort( 2 ) ]);
        dto.setFormaalTekst( rs.getString( 3 ));
        dto.setKanPtLiggeStille30( rs.getBoolean( 4 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setPtTaalerFaste( rs.getBoolean( 5 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setDiabetes( rs.getBoolean( 6 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setDMBeh( rs.getString( 7 ));
        dto.setSmerter( rs.getBoolean( 8 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setRespInsuff( rs.getBoolean( 9 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setKlaustrofobi( rs.getBoolean( 10 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAllergi( rs.getBoolean( 11 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAllergiTekst( rs.getString( 12 ));
        dto.setFedme( rs.getBoolean( 13 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setVaegt( rs.getInt( 14 ));
        dto.setBiopsi( rs.getBoolean( 15 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setBiopsiTekst( rs.getString( 16 ));
        dto.setOperation( rs.getBoolean( 17 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setOperationTekst( rs.getString( 18 ));
        dto.setKemoOgStraale( _PETCTKontrolskema_KemoOgStraales[ rs.getShort( 19 ) ]);
        dto.setKontrastReaktion( rs.getBoolean( 20 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setKontrastReaktionTekst( rs.getString( 21 ));
        dto.setNedsatNyreFkt( rs.getBoolean( 22 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setSidstePKreatinin( rs.getInt( 23 ));

        if ( rs.wasNull()) {
            dto.setSidstePKreatinin( null );
        }

        dto.setSidstePKreatTimestamp( rs.getTimestamp( 24 ));
        dto.setPreMed( rs.getBoolean( 25 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setPreMed( null );
        }

        dto.setDMRegime( rs.getBoolean( 26 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setDMRegime( null );
        }

        dto.setPOKontrast( rs.getBoolean( 27 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setPOKontrast( null );
        }

        dto.setIVKontrast( rs.getBoolean( 28 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setIVKontrast( null );
        }

        dto.setAktuelPKreatinin( rs.getInt( 29 ));

        if ( rs.wasNull()) {
            dto.setAktuelPKreatinin( null );
        }

        dto.setAktuelPKreatTimestamp( rs.getTimestamp( 30 ));
        dto.setAktuelAndetTekst( rs.getString( 31 ));

        return dto;
    }

    protected PETCTKontrolskema[] toArray(ArrayList<PETCTKontrolskema> list ) {
        PETCTKontrolskema[] ret = new PETCTKontrolskema[ list.size() ];
        return list.toArray( ret );
    }

}
