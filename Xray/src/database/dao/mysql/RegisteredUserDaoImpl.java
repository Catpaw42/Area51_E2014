/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.RegisteredUserDao;
import database.dto.RegisteredUser;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class RegisteredUserDaoImpl extends AbstractDaoImpl<RegisteredUser> implements RegisteredUserDao {

    private static final String TABLE_NAME = "registered_users";

    protected static final String SELECT_COLUMNS = "user_id, gae_user_id, user_name, created_date, last_login_date";

    protected static final String PK_CONDITION = "user_id=?";

    private static final String SQL_INSERT = "INSERT INTO registered_users (gae_user_id,user_name,created_date,last_login_date) VALUES (?,?,?,?)";

    public RegisteredUserDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public RegisteredUser findByPrimaryKey( long userId ) {
        return findOne( PK_CONDITION, userId);
    }

    /**
     * Finds a record.
     */
    public RegisteredUser findByGaeUserId( String gaeUserId ) {
        return findOne( "gae_user_id=?", gaeUserId);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - userId
     */
    public long insert( RegisteredUser dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getGaeUserId() == null ) {
                throw new DaoException("Value of column 'gae_user_id' cannot be null");
            }
            checkMaxLength( "gae_user_id", dto.getGaeUserId(), 500 );
            stmt.setString( 1, dto.getGaeUserId() );

            if ( dto.getUserName() == null ) {
                throw new DaoException("Value of column 'user_name' cannot be null");
            }
            checkMaxLength( "user_name", dto.getUserName(), 500 );
            stmt.setString( 2, dto.getUserName() );

            if ( dto.getCreatedDate() == null ) {
                dto.setCreatedDate( new Date( System.currentTimeMillis()));
            }
            stmt.setDate( 3, dto.getCreatedDate() );

            if ( dto.getLastLoginDate() == null ) {
                dto.setLastLoginDate( new Timestamp( System.currentTimeMillis()));
            }
            stmt.setTimestamp( 4, dto.getLastLoginDate() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setUserId( rs.getLong( 1 ));

            return dto.getUserId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Updates column last_login_date of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateLastLoginDate( long userId, Timestamp lastLoginDate ) throws DaoException {
        checkNull( "last_login_date", lastLoginDate );

        return updateOne( "last_login_date=?", PK_CONDITION, lastLoginDate, userId);
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected RegisteredUser fetch( ResultSet rs ) throws SQLException {
        RegisteredUser dto = new RegisteredUser();
        dto.setUserId( rs.getLong( 1 ));
        dto.setGaeUserId( rs.getString( 2 ));
        dto.setUserName( rs.getString( 3 ));
        dto.setCreatedDate( rs.getDate( 4 ));
        dto.setLastLoginDate( rs.getTimestamp( 5 ));

        return dto;
    }

    protected RegisteredUser[] toArray(ArrayList<RegisteredUser> list ) {
        RegisteredUser[] ret = new RegisteredUser[ list.size() ];
        return list.toArray( ret );
    }

}
