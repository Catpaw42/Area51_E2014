/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.MrKontrolDao;
import database.dto.MrKontrol;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class MrKontrolDaoImpl extends AbstractDaoImpl<MrKontrol> implements MrKontrolDao {

    private static final String TABLE_NAME = "mr_kontrol";

    protected static final String SELECT_COLUMNS = "mr_kontrolskema_id, patient_cpr, tidl_billed_diagnostik, pacemaker, metal_implantater, metal_implantater_beskrivelse, andet_metalisk, metal_implantater_beskrivelse, nyresygdom, nyresygdom_beskrivelse, graviditet, graviditet_uge, klaustrofobi, praep_forsyn, hoejde, vaegt, rekvirent_id, mr_boern, mr_voksen";

    protected static final String PK_CONDITION = "mr_kontrolskema_id=?";

    private static final String SQL_INSERT = "INSERT INTO mr_kontrol (patient_cpr,tidl_billed_diagnostik,pacemaker,metal_implantater,metal_implantater_beskrivelse,andet_metalisk,metal_implantater_beskrivelse,nyresygdom,nyresygdom_beskrivelse,graviditet,graviditet_uge,klaustrofobi,praep_forsyn,hoejde,vaegt,rekvirent_id,mr_boern,mr_voksen) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    private static final MrKontrol.MrBoern[] _MrKontrol_MrBoerns = { null, MrKontrol.MrBoern.UDEN_SEDERING, MrKontrol.MrBoern.I_GENEREL_ANAESTESI };
    private static final MrKontrol.MrVoksen[] _MrKontrol_MrVoksens = { null, MrKontrol.MrVoksen.UDEN_SEDERING, MrKontrol.MrVoksen.MED_SEDERING, MrKontrol.MrVoksen.I_GENEREL_ANAESTESI };

    public MrKontrolDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public MrKontrol findByPrimaryKey( int mrKontrolskemaId ) {
        return findOne( PK_CONDITION, mrKontrolskemaId);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - mrKontrolskemaId
     */
    public int insert( MrKontrol dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getPatientCpr() == null ) {
                throw new DaoException("Value of column 'patient_cpr' cannot be null");
            }
            stmt.setInt( 1, dto.getPatientCpr() );

            if ( dto.getTidlBilledDiagnostik() != null ) {
                checkMaxLength( "tidl_billed_diagnostik", dto.getTidlBilledDiagnostik(), 50 );
            }
            stmt.setString( 2, dto.getTidlBilledDiagnostik() );

            if ( dto.getPacemaker() == null ) {
                throw new DaoException("Value of column 'pacemaker' cannot be null");
            }
            stmt.setByte( 3, dto.getPacemaker() ? ((byte)1) : ((byte)0) );

            if ( dto.getMetalImplantater() == null ) {
                throw new DaoException("Value of column 'metal_implantater' cannot be null");
            }
            stmt.setByte( 4, dto.getMetalImplantater() ? ((byte)1) : ((byte)0) );

            if ( dto.getMetalImplantaterBeskrivelse() != null ) {
                checkMaxLength( "metal_implantater_beskrivelse", dto.getMetalImplantaterBeskrivelse(), 100 );
            }
            stmt.setString( 5, dto.getMetalImplantaterBeskrivelse() );

            if ( dto.getAndetMetalisk() == null ) {
                throw new DaoException("Value of column 'andet_metalisk' cannot be null");
            }
            stmt.setByte( 6, dto.getAndetMetalisk() ? ((byte)1) : ((byte)0) );

            if ( dto.getMetalImplantaterBeskrivelse() != null ) {
                checkMaxLength( "metal_implantater_beskrivelse", dto.getMetalImplantaterBeskrivelse(), 100 );
            }
            stmt.setString( 7, dto.getMetalImplantaterBeskrivelse() );

            if ( dto.getNyresygdom() == null ) {
                throw new DaoException("Value of column 'nyresygdom' cannot be null");
            }
            stmt.setByte( 8, dto.getNyresygdom() ? ((byte)1) : ((byte)0) );

            if ( dto.getNyresygdomBeskrivelse() != null ) {
                checkMaxLength( "nyresygdom_beskrivelse", dto.getNyresygdomBeskrivelse(), 100 );
            }
            stmt.setString( 9, dto.getNyresygdomBeskrivelse() );

            if ( dto.getGraviditet() == null ) {
                stmt.setNull( 10, Types.TINYINT );
            }
            else {
                stmt.setByte( 10, dto.getGraviditet() ? ((byte)1) : ((byte)0) );
            }

            if ( dto.getGraviditetUge() == null ) {
                stmt.setNull( 11, Types.INTEGER );
            }
            else {
                stmt.setInt( 11, dto.getGraviditetUge() );
            }

            if ( dto.getKlaustrofobi() == null ) {
                throw new DaoException("Value of column 'klaustrofobi' cannot be null");
            }
            stmt.setByte( 12, dto.getKlaustrofobi() ? ((byte)1) : ((byte)0) );

            if ( dto.getPraepForsyn() != null ) {
                checkMaxLength( "praep_forsyn", dto.getPraepForsyn(), 500 );
            }
            stmt.setString( 13, dto.getPraepForsyn() );

            if ( dto.getHoejde() == null ) {
                stmt.setNull( 14, Types.INTEGER );
            }
            else {
                stmt.setInt( 14, dto.getHoejde() );
            }

            if ( dto.getVaegt() == null ) {
                stmt.setNull( 15, Types.INTEGER );
            }
            else {
                stmt.setInt( 15, dto.getVaegt() );
            }

            if ( dto.getRekvirentId() == null ) {
                stmt.setNull( 16, Types.INTEGER );
            }
            else {
                stmt.setInt( 16, dto.getRekvirentId() );
            }

            if ( dto.getMrBoern() == null ) {
                stmt.setNull( 17, Types.SMALLINT );
            }
            else {
                stmt.setShort( 17, (short) (dto.getMrBoern().ordinal() + 1) );
            }

            if ( dto.getMrVoksen() == null ) {
                stmt.setNull( 18, Types.SMALLINT );
            }
            else {
                stmt.setShort( 18, (short) (dto.getMrVoksen().ordinal() + 1) );
            }

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setMrKontrolskemaId( rs.getInt( 1 ));

            return dto.getMrKontrolskemaId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Updates column tidl_billed_diagnostik of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateTidlBilledDiagnostik( int mrKontrolskemaId, String tidlBilledDiagnostik ) throws DaoException {
        if ( tidlBilledDiagnostik != null ) {
            checkMaxLength( "tidl_billed_diagnostik", tidlBilledDiagnostik, 50 );
        }

        return updateOne( ( tidlBilledDiagnostik != null ? "tidl_billed_diagnostik=?" : "tidl_billed_diagnostik=NULL"), PK_CONDITION, tidlBilledDiagnostik, mrKontrolskemaId);
    }

    /**
     * Updates column pacemaker of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updatePacemaker( int mrKontrolskemaId, boolean pacemaker ) throws DaoException {
        return updateOne( "pacemaker=?", PK_CONDITION, (pacemaker ? ((byte)1) : ((byte)0)), mrKontrolskemaId);
    }

    /**
     * Updates column metal_implantater of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateMetalImplantater( int mrKontrolskemaId, boolean metalImplantater ) throws DaoException {
        return updateOne( "metal_implantater=?", PK_CONDITION, (metalImplantater ? ((byte)1) : ((byte)0)), mrKontrolskemaId);
    }

    /**
     * Updates column metal_implantater_beskrivelse of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateMetalImplantaterBeskrivelse( int mrKontrolskemaId, String metalImplantaterBeskrivelse ) throws DaoException {
        if ( metalImplantaterBeskrivelse != null ) {
            checkMaxLength( "metal_implantater_beskrivelse", metalImplantaterBeskrivelse, 100 );
        }

        return updateOne( ( metalImplantaterBeskrivelse != null ? "metal_implantater_beskrivelse=?" : "metal_implantater_beskrivelse=NULL"), PK_CONDITION, metalImplantaterBeskrivelse, mrKontrolskemaId);
    }

    /**
     * Updates column andet_metalisk of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAndetMetalisk( int mrKontrolskemaId, boolean andetMetalisk ) throws DaoException {
        return updateOne( "andet_metalisk=?", PK_CONDITION, (andetMetalisk ? ((byte)1) : ((byte)0)), mrKontrolskemaId);
    }

    /**
     * Updates column metal_implantater_beskrivelse of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAndetMetalImplBeskrivelse( int mrKontrolskemaId, String metalImplantaterBeskrivelse ) throws DaoException {
        if ( metalImplantaterBeskrivelse != null ) {
            checkMaxLength( "metal_implantater_beskrivelse", metalImplantaterBeskrivelse, 100 );
        }

        return updateOne( ( metalImplantaterBeskrivelse != null ? "metal_implantater_beskrivelse=?" : "metal_implantater_beskrivelse=NULL"), PK_CONDITION, metalImplantaterBeskrivelse, mrKontrolskemaId);
    }

    /**
     * Updates column nyresygdom of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateNyresygdom( int mrKontrolskemaId, boolean nyresygdom ) throws DaoException {
        return updateOne( "nyresygdom=?", PK_CONDITION, (nyresygdom ? ((byte)1) : ((byte)0)), mrKontrolskemaId);
    }

    /**
     * Updates column nyresygdom_beskrivelse of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateNyresygdomBeskrivelse( int mrKontrolskemaId, String nyresygdomBeskrivelse ) throws DaoException {
        if ( nyresygdomBeskrivelse != null ) {
            checkMaxLength( "nyresygdom_beskrivelse", nyresygdomBeskrivelse, 100 );
        }

        return updateOne( ( nyresygdomBeskrivelse != null ? "nyresygdom_beskrivelse=?" : "nyresygdom_beskrivelse=NULL"), PK_CONDITION, nyresygdomBeskrivelse, mrKontrolskemaId);
    }

    /**
     * Updates column graviditet of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateGraviditet( int mrKontrolskemaId, Boolean graviditet ) throws DaoException {
        return updateOne( ( graviditet != null ? "graviditet=?" : "graviditet=NULL"), PK_CONDITION, (graviditet == null ? null : (graviditet ? ((byte)1) : ((byte)0))), mrKontrolskemaId);
    }

    /**
     * Updates column graviditet_uge of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateGraviditetUge( int mrKontrolskemaId, Integer graviditetUge ) throws DaoException {
        return updateOne( ( graviditetUge != null ? "graviditet_uge=?" : "graviditet_uge=NULL"), PK_CONDITION, graviditetUge, mrKontrolskemaId);
    }

    /**
     * Updates column praep_forsyn of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updatePraepForsyn( int mrKontrolskemaId, String praepForsyn ) throws DaoException {
        if ( praepForsyn != null ) {
            checkMaxLength( "praep_forsyn", praepForsyn, 500 );
        }

        return updateOne( ( praepForsyn != null ? "praep_forsyn=?" : "praep_forsyn=NULL"), PK_CONDITION, praepForsyn, mrKontrolskemaId);
    }

    /**
     * Updates column hoejde of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateHoejde( int mrKontrolskemaId, Integer hoejde ) throws DaoException {
        return updateOne( ( hoejde != null ? "hoejde=?" : "hoejde=NULL"), PK_CONDITION, hoejde, mrKontrolskemaId);
    }

    /**
     * Updates column vaegt of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateVaegt( int mrKontrolskemaId, Integer vaegt ) throws DaoException {
        return updateOne( ( vaegt != null ? "vaegt=?" : "vaegt=NULL"), PK_CONDITION, vaegt, mrKontrolskemaId);
    }

    /**
     * Updates column rekvirent_id of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateRekvirentId( int mrKontrolskemaId, Integer rekvirentId ) throws DaoException {
        return updateOne( ( rekvirentId != null ? "rekvirent_id=?" : "rekvirent_id=NULL"), PK_CONDITION, rekvirentId, mrKontrolskemaId);
    }

    /**
     * Updates column mr_boern of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateMrBoern( int mrKontrolskemaId, MrKontrol.MrBoern mrBoern ) throws DaoException {
        return updateOne( ( mrBoern != null ? "mr_boern=?" : "mr_boern=NULL"), PK_CONDITION, (mrBoern != null ? mrBoern.ordinal() + 1 : null), mrKontrolskemaId);
    }

    /**
     * Updates column mr_voksen of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateMrVoksen( int mrKontrolskemaId, MrKontrol.MrVoksen mrVoksen ) throws DaoException {
        return updateOne( ( mrVoksen != null ? "mr_voksen=?" : "mr_voksen=NULL"), PK_CONDITION, (mrVoksen != null ? mrVoksen.ordinal() + 1 : null), mrKontrolskemaId);
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected MrKontrol fetch( ResultSet rs ) throws SQLException {
        MrKontrol dto = new MrKontrol();
        dto.setMrKontrolskemaId( rs.getInt( 1 ));
        dto.setPatientCpr( rs.getInt( 2 ));
        dto.setTidlBilledDiagnostik( rs.getString( 3 ));
        dto.setPacemaker( rs.getBoolean( 4 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setMetalImplantater( rs.getBoolean( 5 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setMetalImplantaterBeskrivelse( rs.getString( 6 ));
        dto.setAndetMetalisk( rs.getBoolean( 7 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setMetalImplantaterBeskrivelse( rs.getString( 8 ));
        dto.setNyresygdom( rs.getBoolean( 9 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setNyresygdomBeskrivelse( rs.getString( 10 ));
        dto.setGraviditet( rs.getBoolean( 11 ) ? Boolean.TRUE : Boolean.FALSE );

        if ( rs.wasNull()) {
            dto.setGraviditet( null );
        }

        dto.setGraviditetUge( rs.getInt( 12 ));

        if ( rs.wasNull()) {
            dto.setGraviditetUge( null );
        }

        dto.setKlaustrofobi( rs.getBoolean( 13 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setPraepForsyn( rs.getString( 14 ));
        dto.setHoejde( rs.getInt( 15 ));

        if ( rs.wasNull()) {
            dto.setHoejde( null );
        }

        dto.setVaegt( rs.getInt( 16 ));

        if ( rs.wasNull()) {
            dto.setVaegt( null );
        }

        dto.setRekvirentId( rs.getInt( 17 ));

        if ( rs.wasNull()) {
            dto.setRekvirentId( null );
        }

        dto.setMrBoern( _MrKontrol_MrBoerns[ rs.getShort( 18 ) ]);

        if ( rs.wasNull()) {
            dto.setMrBoern( null );
        }

        dto.setMrVoksen( _MrKontrol_MrVoksens[ rs.getShort( 19 ) ]);

        if ( rs.wasNull()) {
            dto.setMrVoksen( null );
        }


        return dto;
    }

    protected MrKontrol[] toArray(ArrayList<MrKontrol> list ) {
        MrKontrol[] ret = new MrKontrol[ list.size() ];
        return list.toArray( ret );
    }

}
