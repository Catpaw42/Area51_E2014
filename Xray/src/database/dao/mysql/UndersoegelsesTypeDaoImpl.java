/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.UndersoegelsesTypeDao;
import database.dto.UndersoegelsesType;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class UndersoegelsesTypeDaoImpl extends AbstractDaoImpl<UndersoegelsesType> implements UndersoegelsesTypeDao {

    private static final String TABLE_NAME = "undersoegelses_type";

    protected static final String SELECT_COLUMNS = "undersoegelses_type_id, undersoegelses_navn";

    protected static final String PK_CONDITION = "undersoegelses_type_id=?";

    private static final String SQL_INSERT = "INSERT INTO undersoegelses_type (undersoegelses_navn) VALUES (?)";

    public UndersoegelsesTypeDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public UndersoegelsesType findByPrimaryKey( int undersoegelsesTypeId ) {
        return findOne( PK_CONDITION, undersoegelsesTypeId);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - undersoegelsesTypeId
     */
    public int insert( UndersoegelsesType dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getUndersoegelsesNavn() == null ) {
                throw new DaoException("Value of column 'undersoegelses_navn' cannot be null");
            }
            checkMaxLength( "undersoegelses_navn", dto.getUndersoegelsesNavn(), 40 );
            stmt.setString( 1, dto.getUndersoegelsesNavn() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setUndersoegelsesTypeId( rs.getInt( 1 ));

            return dto.getUndersoegelsesTypeId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected UndersoegelsesType fetch( ResultSet rs ) throws SQLException {
        UndersoegelsesType dto = new UndersoegelsesType();
        dto.setUndersoegelsesTypeId( rs.getInt( 1 ));
        dto.setUndersoegelsesNavn( rs.getString( 2 ));

        return dto;
    }

    protected UndersoegelsesType[] toArray(ArrayList<UndersoegelsesType> list ) {
        UndersoegelsesType[] ret = new UndersoegelsesType[ list.size() ];
        return list.toArray( ret );
    }

}
