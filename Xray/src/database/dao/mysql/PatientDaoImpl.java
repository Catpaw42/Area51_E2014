/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.PatientDao;
import database.dto.Patient;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class PatientDaoImpl extends AbstractDaoImpl<Patient> implements PatientDao {

    private static final String TABLE_NAME = "patient";

    protected static final String SELECT_COLUMNS = "patient_id, patient_cpr, patient_navn, patient_adresse, patient_tlf, foedselsdag, stamafdeling";

    protected static final String PK_CONDITION = "patient_id=?";

    private static final String SQL_INSERT = "INSERT INTO patient (patient_cpr,patient_navn,patient_adresse,patient_tlf,foedselsdag,stamafdeling) VALUES (?,?,?,?,?,?)";

    public PatientDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public Patient findByPrimaryKey( int patientId ) {
        return findOne( PK_CONDITION, patientId);
    }

    /**
     * Finds records.
     */
    public Patient[] findDynamic( String cond, int offset, int count, Object... params ) {
        return findManyArray( cond, offset, count, params);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - patientId
     */
    public int insert( Patient dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getPatientCpr() == null ) {
                throw new DaoException("Value of column 'patient_cpr' cannot be null");
            }
            checkMaxLength( "patient_cpr", dto.getPatientCpr(), 30 );
            stmt.setString( 1, dto.getPatientCpr() );

            if ( dto.getPatientNavn() == null ) {
                throw new DaoException("Value of column 'patient_navn' cannot be null");
            }
            checkMaxLength( "patient_navn", dto.getPatientNavn(), 100 );
            stmt.setString( 2, dto.getPatientNavn() );

            if ( dto.getPatientAdresse() == null ) {
                throw new DaoException("Value of column 'patient_adresse' cannot be null");
            }
            checkMaxLength( "patient_adresse", dto.getPatientAdresse(), 100 );
            stmt.setString( 3, dto.getPatientAdresse() );

            if ( dto.getPatientTlf() == null ) {
                throw new DaoException("Value of column 'patient_tlf' cannot be null");
            }
            checkMaxLength( "patient_tlf", dto.getPatientTlf(), 100 );
            stmt.setString( 4, dto.getPatientTlf() );

            if ( dto.getFoedselsdag() == null ) {
                throw new DaoException("Value of column 'foedselsdag' cannot be null");
            }
            stmt.setTimestamp( 5, dto.getFoedselsdag() );

            if ( dto.getStamafdeling() == null ) {
                throw new DaoException("Value of column 'stamafdeling' cannot be null");
            }
            checkMaxLength( "stamafdeling", dto.getStamafdeling(), 50 );
            stmt.setString( 6, dto.getStamafdeling() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setPatientId( rs.getInt( 1 ));

            return dto.getPatientId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected Patient fetch( ResultSet rs ) throws SQLException {
        Patient dto = new Patient();
        dto.setPatientId( rs.getInt( 1 ));
        dto.setPatientCpr( rs.getString( 2 ));
        dto.setPatientNavn( rs.getString( 3 ));
        dto.setPatientAdresse( rs.getString( 4 ));
        dto.setPatientTlf( rs.getString( 5 ));
        dto.setFoedselsdag( rs.getTimestamp( 6 ));
        dto.setStamafdeling( rs.getString( 7 ));

        return dto;
    }

    protected Patient[] toArray(ArrayList<Patient> list ) {
        Patient[] ret = new Patient[ list.size() ];
        return list.toArray( ret );
    }

}
