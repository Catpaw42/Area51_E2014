/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.RequisitionDao;
import database.dto.Requisition;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class RequisitionDaoImpl extends AbstractDaoImpl<Requisition> implements RequisitionDao {

    private static final String TABLE_NAME = "requisition";

    protected static final String SELECT_COLUMNS = "henvist_til, hospital_oenske, pririotering, ambulant_koersel, indlaeggelse_transport, undersoegelse_modalitet, status, rekvisition_id, samtykke, ambulant, dato_forslag, udf_indlagt, graviditet, cave";

    protected static final String PK_CONDITION = "rekvisition_id=?";

    private static final String SQL_INSERT = "INSERT INTO requisition (henvist_til,hospital_oenske,pririotering,ambulant_koersel,indlaeggelse_transport,undersoegelse_modalitet,status,rekvisition_id,samtykke,ambulant,dato_forslag,udf_indlagt,graviditet,cave) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
    private static final Requisition.HenvistTil[] _Requisition_HenvistTils = { null, Requisition.HenvistTil.RADIOLOGISK, Requisition.HenvistTil.KLINISK };
    private static final Requisition.HospitalOenske[] _Requisition_HospitalOenskes = { null, Requisition.HospitalOenske.HILLEROED, Requisition.HospitalOenske.FREDERIKSSUND };
    private static final Requisition.Pririotering[] _Requisition_Pririoterings = { null, Requisition.Pririotering.HASTE, Requisition.Pririotering.RUTINE, Requisition.Pririotering.FREMSKYNDET, Requisition.Pririotering.PAKKEFORLOEB };
    private static final Requisition.AmbulantKoersel[] _Requisition_AmbulantKoersels = { null, Requisition.AmbulantKoersel.INGEN, Requisition.AmbulantKoersel.SIDDENDE, Requisition.AmbulantKoersel.LIGGENDE };
    private static final Requisition.IndlaeggelseTransport[] _Requisition_IndlaeggelseTransports = { null, Requisition.IndlaeggelseTransport.GAA_MED_PORTOER, Requisition.IndlaeggelseTransport.GAA_UDEN_PORTOER, Requisition.IndlaeggelseTransport.KOERESTOL, Requisition.IndlaeggelseTransport.SENG };
    private static final Requisition.UndersoegelseModalitet[] _Requisition_UndersoegelseModalitets = { null, Requisition.UndersoegelseModalitet.PET_CT, Requisition.UndersoegelseModalitet.CT, Requisition.UndersoegelseModalitet.CT_KONTRAST, Requisition.UndersoegelseModalitet.ULTRALYD, Requisition.UndersoegelseModalitet.MR, Requisition.UndersoegelseModalitet.OTHER };
    private static final Requisition.Status[] _Requisition_Statuss = { null, Requisition.Status.PENDING, Requisition.Status.CANCELED, Requisition.Status.APPROVED, Requisition.Status.DECLINED, Requisition.Status.BOOKED };

    public RequisitionDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public Requisition findByPrimaryKey( long rekvisitionId ) {
        return findOne( PK_CONDITION, rekvisitionId);
    }

    /**
     * Inserts a new record.
     */
    public void insert( Requisition dto ) throws DaoException {
        PreparedStatement stmt = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT );

            if ( dto.getHenvistTil() == null ) {
                stmt.setNull( 1, Types.SMALLINT );
            }
            else {
                stmt.setShort( 1, (short) (dto.getHenvistTil().ordinal() + 1) );
            }

            if ( dto.getHospitalOenske() == null ) {
                stmt.setNull( 2, Types.SMALLINT );
            }
            else {
                stmt.setShort( 2, (short) (dto.getHospitalOenske().ordinal() + 1) );
            }

            if ( dto.getPririotering() == null ) {
                stmt.setNull( 3, Types.SMALLINT );
            }
            else {
                stmt.setShort( 3, (short) (dto.getPririotering().ordinal() + 1) );
            }

            if ( dto.getAmbulantKoersel() == null ) {
                stmt.setNull( 4, Types.SMALLINT );
            }
            else {
                stmt.setShort( 4, (short) (dto.getAmbulantKoersel().ordinal() + 1) );
            }

            if ( dto.getIndlaeggelseTransport() == null ) {
                stmt.setNull( 5, Types.SMALLINT );
            }
            else {
                stmt.setShort( 5, (short) (dto.getIndlaeggelseTransport().ordinal() + 1) );
            }

            if ( dto.getUndersoegelseModalitet() == null ) {
                stmt.setNull( 6, Types.SMALLINT );
            }
            else {
                stmt.setShort( 6, (short) (dto.getUndersoegelseModalitet().ordinal() + 1) );
            }

            if ( dto.getStatus() == null ) {
                stmt.setNull( 7, Types.SMALLINT );
            }
            else {
                stmt.setShort( 7, (short) (dto.getStatus().ordinal() + 1) );
            }

            if ( dto.getRekvisitionId() == null ) {
                throw new DaoException("Value of column 'rekvisition_id' cannot be null");
            }
            stmt.setLong( 8, dto.getRekvisitionId() );

            if ( dto.getSamtykke() == null ) {
                throw new DaoException("Value of column 'samtykke' cannot be null");
            }
            stmt.setByte( 9, dto.getSamtykke() ? ((byte)1) : ((byte)0) );

            if ( dto.getAmbulant() == null ) {
                throw new DaoException("Value of column 'ambulant' cannot be null");
            }
            stmt.setByte( 10, dto.getAmbulant() ? ((byte)1) : ((byte)0) );

            if ( dto.getDatoForslag() != null ) {
                checkMaxLength( "dato_forslag", dto.getDatoForslag(), 50 );
            }
            stmt.setString( 11, dto.getDatoForslag() );

            if ( dto.getUdfIndlagt() == null ) {
                throw new DaoException("Value of column 'udf_indlagt' cannot be null");
            }
            stmt.setByte( 12, dto.getUdfIndlagt() ? ((byte)1) : ((byte)0) );

            if ( dto.getGraviditet() == null ) {
                throw new DaoException("Value of column 'graviditet' cannot be null");
            }
            stmt.setByte( 13, dto.getGraviditet() ? ((byte)1) : ((byte)0) );

            if ( dto.getCave() == null ) {
                throw new DaoException("Value of column 'cave' cannot be null");
            }
            checkMaxLength( "cave", dto.getCave(), 500 );
            stmt.setString( 14, dto.getCave() );

            int n = stmt.executeUpdate();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Updates column henvist_til of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateHenvistTil( long rekvisitionId, Requisition.HenvistTil henvistTil ) throws DaoException {
        return updateOne( ( henvistTil != null ? "henvist_til=?" : "henvist_til=NULL"), PK_CONDITION, (henvistTil != null ? henvistTil.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column hospital_oenske of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateHospitalOenske( long rekvisitionId, Requisition.HospitalOenske hospitalOenske ) throws DaoException {
        return updateOne( ( hospitalOenske != null ? "hospital_oenske=?" : "hospital_oenske=NULL"), PK_CONDITION, (hospitalOenske != null ? hospitalOenske.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column pririotering of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updatePririotering( long rekvisitionId, Requisition.Pririotering pririotering ) throws DaoException {
        return updateOne( ( pririotering != null ? "pririotering=?" : "pririotering=NULL"), PK_CONDITION, (pririotering != null ? pririotering.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column ambulant_koersel of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAmbulantKoersel( long rekvisitionId, Requisition.AmbulantKoersel ambulantKoersel ) throws DaoException {
        return updateOne( ( ambulantKoersel != null ? "ambulant_koersel=?" : "ambulant_koersel=NULL"), PK_CONDITION, (ambulantKoersel != null ? ambulantKoersel.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column indlaeggelse_transport of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateIndlaeggelseTransport( long rekvisitionId, Requisition.IndlaeggelseTransport indlaeggelseTransport ) throws DaoException {
        return updateOne( ( indlaeggelseTransport != null ? "indlaeggelse_transport=?" : "indlaeggelse_transport=NULL"), PK_CONDITION, (indlaeggelseTransport != null ? indlaeggelseTransport.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column undersoegelse_modalitet of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateUndersoegelseModalitet( long rekvisitionId, Requisition.UndersoegelseModalitet undersoegelseModalitet ) throws DaoException {
        return updateOne( ( undersoegelseModalitet != null ? "undersoegelse_modalitet=?" : "undersoegelse_modalitet=NULL"), PK_CONDITION, (undersoegelseModalitet != null ? undersoegelseModalitet.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column status of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateStatus( long rekvisitionId, Requisition.Status status ) throws DaoException {
        return updateOne( ( status != null ? "status=?" : "status=NULL"), PK_CONDITION, (status != null ? status.ordinal() + 1 : null), rekvisitionId);
    }

    /**
     * Updates column samtykke of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateSamtykke( long rekvisitionId, boolean samtykke ) throws DaoException {
        return updateOne( "samtykke=?", PK_CONDITION, (samtykke ? ((byte)1) : ((byte)0)), rekvisitionId);
    }

    /**
     * Updates column ambulant of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateAmbulant( long rekvisitionId, boolean ambulant ) throws DaoException {
        return updateOne( "ambulant=?", PK_CONDITION, (ambulant ? ((byte)1) : ((byte)0)), rekvisitionId);
    }

    /**
     * Updates column dato_forslag of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateDatoForslag( long rekvisitionId, String datoForslag ) throws DaoException {
        if ( datoForslag != null ) {
            checkMaxLength( "dato_forslag", datoForslag, 50 );
        }

        return updateOne( ( datoForslag != null ? "dato_forslag=?" : "dato_forslag=NULL"), PK_CONDITION, datoForslag, rekvisitionId);
    }

    /**
     * Updates column udf_indlagt of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateUdfIndlagt( long rekvisitionId, boolean udfIndlagt ) throws DaoException {
        return updateOne( "udf_indlagt=?", PK_CONDITION, (udfIndlagt ? ((byte)1) : ((byte)0)), rekvisitionId);
    }

    /**
     * Updates column graviditet of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateGraviditet( long rekvisitionId, boolean graviditet ) throws DaoException {
        return updateOne( "graviditet=?", PK_CONDITION, (graviditet ? ((byte)1) : ((byte)0)), rekvisitionId);
    }

    /**
     * Updates column cave of one record found by primary key.
     * @return true iff the record was really updated (=found)
     */
    public boolean updateCave( long rekvisitionId, String cave ) throws DaoException {
        checkNull( "cave", cave );
        checkMaxLength( "cave", cave, 500 );

        return updateOne( "cave=?", PK_CONDITION, cave, rekvisitionId);
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected Requisition fetch( ResultSet rs ) throws SQLException {
        Requisition dto = new Requisition();
        dto.setHenvistTil( _Requisition_HenvistTils[ rs.getShort( 1 ) ]);

        if ( rs.wasNull()) {
            dto.setHenvistTil( null );
        }

        dto.setHospitalOenske( _Requisition_HospitalOenskes[ rs.getShort( 2 ) ]);

        if ( rs.wasNull()) {
            dto.setHospitalOenske( null );
        }

        dto.setPririotering( _Requisition_Pririoterings[ rs.getShort( 3 ) ]);

        if ( rs.wasNull()) {
            dto.setPririotering( null );
        }

        dto.setAmbulantKoersel( _Requisition_AmbulantKoersels[ rs.getShort( 4 ) ]);

        if ( rs.wasNull()) {
            dto.setAmbulantKoersel( null );
        }

        dto.setIndlaeggelseTransport( _Requisition_IndlaeggelseTransports[ rs.getShort( 5 ) ]);

        if ( rs.wasNull()) {
            dto.setIndlaeggelseTransport( null );
        }

        dto.setUndersoegelseModalitet( _Requisition_UndersoegelseModalitets[ rs.getShort( 6 ) ]);

        if ( rs.wasNull()) {
            dto.setUndersoegelseModalitet( null );
        }

        dto.setStatus( _Requisition_Statuss[ rs.getShort( 7 ) ]);

        if ( rs.wasNull()) {
            dto.setStatus( null );
        }

        dto.setRekvisitionId( rs.getLong( 8 ));
        dto.setSamtykke( rs.getBoolean( 9 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAmbulant( rs.getBoolean( 10 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setDatoForslag( rs.getString( 11 ));
        dto.setUdfIndlagt( rs.getBoolean( 12 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setGraviditet( rs.getBoolean( 13 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setCave( rs.getString( 14 ));

        return dto;
    }

    protected Requisition[] toArray(ArrayList<Requisition> list ) {
        Requisition[] ret = new Requisition[ list.size() ];
        return list.toArray( ret );
    }

}
