/*
 * This file was generated - do not edit it directly !!
 * Generated by AuDAO tool, a product of Spolecne s.r.o.
 * For more information please visit http://www.spoledge.com
 */
package database.dao.mysql;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import com.spoledge.audao.db.dao.AbstractDaoImpl;
import com.spoledge.audao.db.dao.DBException;
import com.spoledge.audao.db.dao.DaoException;


import database.dao.CtKontrastKontrolskemaDao;
import database.dto.CtKontrastKontrolskema;


/**
 * This is the DAO imlementation class.
 *
 * @author generated
 */
public class CtKontrastKontrolskemaDaoImpl extends AbstractDaoImpl<CtKontrastKontrolskema> implements CtKontrastKontrolskemaDao {

    private static final String TABLE_NAME = "ct_kontrast_kontrolskema";

    protected static final String SELECT_COLUMNS = "ct_kontrast_kontrolskema_id, diabetes, nyrefunktion, nyreopereret, hjertesygdom, myokardieinfarkt, proteinuri, urinsyregigt, over70, hypertension, nsaid_praeparat, aminoglykosider, allergi, kontraststofreaktion, astma, hyperthyreoidisme, metformin, interleukin2, beta_blokkere, p_kreatinin_vaerdi, p_kreatinin_timestamp, pt_hoejde, pt_vaegt";

    protected static final String PK_CONDITION = "ct_kontrast_kontrolskema_id=?";

    private static final String SQL_INSERT = "INSERT INTO ct_kontrast_kontrolskema (diabetes,nyrefunktion,nyreopereret,hjertesygdom,myokardieinfarkt,proteinuri,urinsyregigt,over70,hypertension,nsaid_praeparat,aminoglykosider,allergi,kontraststofreaktion,astma,hyperthyreoidisme,metformin,interleukin2,beta_blokkere,p_kreatinin_vaerdi,p_kreatinin_timestamp,pt_hoejde,pt_vaegt) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

    public CtKontrastKontrolskemaDaoImpl( Connection conn ) {
        super( conn );
    }

    /**
     * Finds a record identified by its primary key.
     * @return the record found or null
     */
    public CtKontrastKontrolskema findByPrimaryKey( int ctKontrastKontrolskemaId ) {
        return findOne( PK_CONDITION, ctKontrastKontrolskemaId);
    }

    /**
     * Inserts a new record.
     * @return the generated primary key - ctKontrastKontrolskemaId
     */
    public int insert( CtKontrastKontrolskema dto ) throws DaoException {
        PreparedStatement stmt = null;
        ResultSet rs = null;

        debugSql( SQL_INSERT, dto );

        try {
            stmt = conn.prepareStatement( SQL_INSERT, PreparedStatement.RETURN_GENERATED_KEYS );

            if ( dto.getDiabetes() == null ) {
                throw new DaoException("Value of column 'diabetes' cannot be null");
            }
            stmt.setByte( 1, dto.getDiabetes() ? ((byte)1) : ((byte)0) );

            if ( dto.getNyrefunktion() == null ) {
                throw new DaoException("Value of column 'nyrefunktion' cannot be null");
            }
            stmt.setByte( 2, dto.getNyrefunktion() ? ((byte)1) : ((byte)0) );

            if ( dto.getNyreopereret() == null ) {
                throw new DaoException("Value of column 'nyreopereret' cannot be null");
            }
            stmt.setByte( 3, dto.getNyreopereret() ? ((byte)1) : ((byte)0) );

            if ( dto.getHjertesygdom() == null ) {
                throw new DaoException("Value of column 'hjertesygdom' cannot be null");
            }
            stmt.setByte( 4, dto.getHjertesygdom() ? ((byte)1) : ((byte)0) );

            if ( dto.getMyokardieinfarkt() == null ) {
                throw new DaoException("Value of column 'myokardieinfarkt' cannot be null");
            }
            stmt.setByte( 5, dto.getMyokardieinfarkt() ? ((byte)1) : ((byte)0) );

            if ( dto.getProteinuri() == null ) {
                throw new DaoException("Value of column 'proteinuri' cannot be null");
            }
            stmt.setByte( 6, dto.getProteinuri() ? ((byte)1) : ((byte)0) );

            if ( dto.getUrinsyregigt() == null ) {
                throw new DaoException("Value of column 'urinsyregigt' cannot be null");
            }
            stmt.setByte( 7, dto.getUrinsyregigt() ? ((byte)1) : ((byte)0) );

            if ( dto.getOver70() == null ) {
                throw new DaoException("Value of column 'over70' cannot be null");
            }
            stmt.setByte( 8, dto.getOver70() ? ((byte)1) : ((byte)0) );

            if ( dto.getHypertension() == null ) {
                throw new DaoException("Value of column 'hypertension' cannot be null");
            }
            stmt.setByte( 9, dto.getHypertension() ? ((byte)1) : ((byte)0) );

            if ( dto.getNsaidPraeparat() == null ) {
                throw new DaoException("Value of column 'nsaid_praeparat' cannot be null");
            }
            stmt.setByte( 10, dto.getNsaidPraeparat() ? ((byte)1) : ((byte)0) );

            if ( dto.getAminoglykosider() == null ) {
                throw new DaoException("Value of column 'aminoglykosider' cannot be null");
            }
            stmt.setByte( 11, dto.getAminoglykosider() ? ((byte)1) : ((byte)0) );

            if ( dto.getAllergi() == null ) {
                throw new DaoException("Value of column 'allergi' cannot be null");
            }
            stmt.setByte( 12, dto.getAllergi() ? ((byte)1) : ((byte)0) );

            if ( dto.getKontraststofreaktion() == null ) {
                throw new DaoException("Value of column 'kontraststofreaktion' cannot be null");
            }
            stmt.setByte( 13, dto.getKontraststofreaktion() ? ((byte)1) : ((byte)0) );

            if ( dto.getAstma() == null ) {
                throw new DaoException("Value of column 'astma' cannot be null");
            }
            stmt.setByte( 14, dto.getAstma() ? ((byte)1) : ((byte)0) );

            if ( dto.getHyperthyreoidisme() == null ) {
                throw new DaoException("Value of column 'hyperthyreoidisme' cannot be null");
            }
            stmt.setByte( 15, dto.getHyperthyreoidisme() ? ((byte)1) : ((byte)0) );

            if ( dto.getMetformin() == null ) {
                throw new DaoException("Value of column 'metformin' cannot be null");
            }
            stmt.setByte( 16, dto.getMetformin() ? ((byte)1) : ((byte)0) );

            if ( dto.getInterleukin2() == null ) {
                throw new DaoException("Value of column 'interleukin2' cannot be null");
            }
            stmt.setByte( 17, dto.getInterleukin2() ? ((byte)1) : ((byte)0) );

            if ( dto.getBetaBlokkere() == null ) {
                throw new DaoException("Value of column 'beta_blokkere' cannot be null");
            }
            stmt.setByte( 18, dto.getBetaBlokkere() ? ((byte)1) : ((byte)0) );

            if ( dto.getPKreatininVaerdi() == null ) {
                throw new DaoException("Value of column 'p_kreatinin_vaerdi' cannot be null");
            }
            checkMaxLength( "p_kreatinin_vaerdi", dto.getPKreatininVaerdi(), 50 );
            stmt.setString( 19, dto.getPKreatininVaerdi() );

            if ( dto.getPKreatininTimestamp() == null ) {
                throw new DaoException("Value of column 'p_kreatinin_timestamp' cannot be null");
            }
            stmt.setTimestamp( 20, dto.getPKreatininTimestamp() );

            if ( dto.getPtHoejde() == null ) {
                throw new DaoException("Value of column 'pt_hoejde' cannot be null");
            }
            stmt.setInt( 21, dto.getPtHoejde() );

            if ( dto.getPtVaegt() == null ) {
                throw new DaoException("Value of column 'pt_vaegt' cannot be null");
            }
            stmt.setInt( 22, dto.getPtVaegt() );

            int n = stmt.executeUpdate();

            rs = stmt.getGeneratedKeys();
            rs.next();

            dto.setCtKontrastKontrolskemaId( rs.getInt( 1 ));

            return dto.getCtKontrastKontrolskemaId();
        }
        catch (SQLException e) {
            errorSql( e, SQL_INSERT, dto );
            handleException( e );
            throw new DBException( e );
        }
        finally {
            if (rs != null) try { rs.close(); } catch (SQLException e) {}
            if (stmt != null) try { stmt.close(); } catch (SQLException e) {}
        }
    }

    /**
     * Returns the table name.
     */
    public String getTableName() {
        return TABLE_NAME;
    }

    protected String getSelectColumns() {
        return SELECT_COLUMNS;
    }

    protected CtKontrastKontrolskema fetch( ResultSet rs ) throws SQLException {
        CtKontrastKontrolskema dto = new CtKontrastKontrolskema();
        dto.setCtKontrastKontrolskemaId( rs.getInt( 1 ));
        dto.setDiabetes( rs.getBoolean( 2 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setNyrefunktion( rs.getBoolean( 3 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setNyreopereret( rs.getBoolean( 4 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setHjertesygdom( rs.getBoolean( 5 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setMyokardieinfarkt( rs.getBoolean( 6 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setProteinuri( rs.getBoolean( 7 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setUrinsyregigt( rs.getBoolean( 8 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setOver70( rs.getBoolean( 9 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setHypertension( rs.getBoolean( 10 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setNsaidPraeparat( rs.getBoolean( 11 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAminoglykosider( rs.getBoolean( 12 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAllergi( rs.getBoolean( 13 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setKontraststofreaktion( rs.getBoolean( 14 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setAstma( rs.getBoolean( 15 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setHyperthyreoidisme( rs.getBoolean( 16 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setMetformin( rs.getBoolean( 17 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setInterleukin2( rs.getBoolean( 18 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setBetaBlokkere( rs.getBoolean( 19 ) ? Boolean.TRUE : Boolean.FALSE );
        dto.setPKreatininVaerdi( rs.getString( 20 ));
        dto.setPKreatininTimestamp( rs.getTimestamp( 21 ));
        dto.setPtHoejde( rs.getInt( 22 ));
        dto.setPtVaegt( rs.getInt( 23 ));

        return dto;
    }

    protected CtKontrastKontrolskema[] toArray(ArrayList<CtKontrastKontrolskema> list ) {
        CtKontrastKontrolskema[] ret = new CtKontrastKontrolskema[ list.size() ];
        return list.toArray( ret );
    }

}
